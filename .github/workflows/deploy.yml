name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: whatsapp_assistant_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 7432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 7379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 7432
      POSTGRES_DB: whatsapp_assistant_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: localhost
      REDIS_PORT: 7379

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üóÑÔ∏è Initialize test database
        run: |
          PGPASSWORD=postgres psql -h localhost -p 7432 -U postgres -d whatsapp_assistant_test -f migrations/1733086800000_initial-schema.sql
          PGPASSWORD=postgres psql -h localhost -p 7432 -U postgres -d whatsapp_assistant_test -f migrations/1733176800000_add_event_comments_jsonb.sql

      - name: üß™ Run tests
        run: npm test
        continue-on-error: false

      - name: üî® Build TypeScript
        run: npm run build

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üîî Notify deployment start
        if: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "üöÄ Deployment Started",
                   "description": "Deploying to production server...",
                   "color": 3447003,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "[`${{ github.sha }}`.substr(0,7)](${{ github.event.head_commit.url }})", "inline": true},
                     {"name": "Author", "value": "${{ github.event.head_commit.author.name }}", "inline": true},
                     {"name": "Message", "value": "${{ github.event.head_commit.message }}", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: üöÄ Deploy to server
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            /root/deploy.sh

      - name: ‚úÖ Deployment notification
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "Server: ${{ secrets.SSH_HOST }}"
          echo "Time: $(date)"

      - name: üîî Notify deployment success
        if: success() && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "‚úÖ Deployment Successful",
                   "description": "Application deployed successfully to production!",
                   "color": 3066993,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true},
                     {"name": "Server", "value": "${{ secrets.SSH_HOST }}", "inline": true},
                     {"name": "Duration", "value": "~${{ job.status }}", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: ‚ùå Deployment failed notification
        if: failure()
        run: |
          echo "‚ö†Ô∏è Deployment failed!"
          echo "Check the logs above for details"
          exit 1

      - name: üîî Notify deployment failure
        if: failure() && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "‚ùå Deployment Failed",
                   "description": "Deployment to production failed! Check the logs.",
                   "color": 15158332,
                   "fields": [
                     {"name": "Repository", "value": "${{ github.repository }}", "inline": true},
                     {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                     {"name": "Commit", "value": "`${{ github.sha }}`", "inline": true},
                     {"name": "Author", "value": "${{ github.event.head_commit.author.name }}", "inline": true},
                     {"name": "Action", "value": "[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: üè• Check server health
        id: health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Checking PM2 status..."
            pm2 status ultrathink

            echo ""
            echo "Checking if process is online..."
            if pm2 status | grep -q "ultrathink.*online"; then
              echo "‚úÖ Process is running"
              exit 0
            else
              echo "‚ùå Process is not running!"
              exit 1
            fi

      - name: üîî Notify health check success
        if: success() && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "üè• Health Check Passed",
                   "description": "Application is healthy and running!",
                   "color": 5763719,
                   "fields": [
                     {"name": "Server", "value": "${{ secrets.SSH_HOST }}", "inline": true},
                     {"name": "Status", "value": "‚úÖ Online", "inline": true},
                     {"name": "Deployment", "value": "Complete", "inline": true}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: üîî Notify health check failure
        if: failure() && secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "‚ö†Ô∏è Health Check Failed",
                   "description": "Application deployed but health check failed!",
                   "color": 15105570,
                   "fields": [
                     {"name": "Server", "value": "${{ secrets.SSH_HOST }}", "inline": true},
                     {"name": "Status", "value": "‚ùå Offline/Error", "inline": true},
                     {"name": "Action", "value": "[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false}
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
