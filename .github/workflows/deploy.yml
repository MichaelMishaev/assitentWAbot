name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: whatsapp_assistant_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 7432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 7379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 7432
      POSTGRES_DB: whatsapp_assistant_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: localhost
      REDIS_PORT: 7379

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üóÑÔ∏è Initialize test database
        run: |
          PGPASSWORD=postgres psql -h localhost -p 7432 -U postgres -d whatsapp_assistant_test -f migrations/1733086800000_initial-schema.sql
          PGPASSWORD=postgres psql -h localhost -p 7432 -U postgres -d whatsapp_assistant_test -f migrations/1733176800000_add_event_comments_jsonb.sql

      - name: üß™ Run tests
        run: npm test
        continue-on-error: false

      - name: üî® Build TypeScript
        run: npm run build

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: üöÄ Deploy to server
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            /root/deploy.sh

      - name: ‚úÖ Deployment notification
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "Server: ${{ secrets.SSH_HOST }}"
          echo "Time: $(date)"

      - name: ‚ùå Deployment failed notification
        if: failure()
        run: |
          echo "‚ö†Ô∏è Deployment failed!"
          echo "Check the logs above for details"
          exit 1

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: üè• Check server health
        id: health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Checking PM2 status..."
            pm2 status ultrathink

            echo ""
            echo "Checking if process is online..."
            if pm2 status | grep -q "ultrathink.*online"; then
              echo "‚úÖ Process is running"
              exit 0
            else
              echo "‚ùå Process is not running!"
              exit 1
            fi

      - name: üì± Send WhatsApp notification (Success)
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /root/wAssitenceBot
            COMMIT_HASH="${{ github.sha }}"
            COMMIT_SHORT="${COMMIT_HASH:0:7}"
            COMMIT_MSG="${{ github.event.head_commit.message }}"

            # Make status check script executable
            chmod +x scripts/check-bot-status.sh

            # Get bot status
            BOT_STATUS=$(bash scripts/check-bot-status.sh)
            echo "Bot status: $BOT_STATUS"

            # Parse JSON
            QR_REQUIRED=$(echo "$BOT_STATUS" | jq -r '.qr_required')
            WA_CONNECTED=$(echo "$BOT_STATUS" | jq -r '.whatsapp_connected')

            # Build message
            if [ "$QR_REQUIRED" = "true" ]; then
              MESSAGE="‚úÖ Deployment successful but ‚ö†Ô∏è *QR CODE SCAN REQUIRED!*

            üì± Bot is running but WhatsApp needs authentication.
            üîç Check server: ssh root@167.71.145.9
            üìã View QR: cat /root/wAssitenceBot/sessions/qr-code.png

            Commit: $COMMIT_MSG ($COMMIT_SHORT)"
            elif [ "$WA_CONNECTED" = "true" ]; then
              MESSAGE="‚úÖ Deployment successful - Bot fully operational!

            üì± WhatsApp connected
            üöÄ All systems running

            Commit: $COMMIT_MSG ($COMMIT_SHORT)"
            else
              MESSAGE="‚úÖ Deployment successful - Bot starting up

            ‚è≥ WhatsApp connection initializing...

            Commit: $COMMIT_MSG ($COMMIT_SHORT)"
            fi

            # Send notification
            node scripts/send-deployment-notification.js "success" "$COMMIT_SHORT" "$MESSAGE" || true

      - name: üì± Send WhatsApp notification (Failure)
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /root/wAssitenceBot
            COMMIT_HASH="${{ github.sha }}"
            COMMIT_SHORT="${COMMIT_HASH:0:7}"
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            node scripts/send-deployment-notification.js "failure" "$COMMIT_SHORT" "‚ùå Health check failed! Check GitHub Actions logs. Commit: $COMMIT_MSG" || true

